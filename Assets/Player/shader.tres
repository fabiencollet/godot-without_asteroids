[gd_resource type="VisualShader" load_steps=13 format=2]

[ext_resource path="res://Assets/Player/player_16_1.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarOp" id=1]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=2]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, -1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=3]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeScalarInterp" id=4]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeScalarInterp" id=6]
default_input_values = [ 0, 0.0, 1, 1.0, 2, 0.0 ]

[sub_resource type="VisualShaderNodeBooleanUniform" id=48]
uniform_name = "invulnerable"

[sub_resource type="VisualShaderNodeScalarUniform" id=49]
uniform_name = "speed"

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "time"

[sub_resource type="VisualShaderNodeTexture" id=8]
source = 2
texture = ExtResource( 1 )
texture_type = 1

[sub_resource type="VisualShaderNodeScalarOp" id=9]
default_input_values = [ 0, 0.0, 1, 20.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=12]
output_port_for_preview = 0
function = 0

[resource]
code = "shader_type canvas_item;
uniform float speed;
uniform bool invulnerable;



void vertex() {
// Output:0

}

void fragment() {
// Texture:5
	vec3 n_out5p0;
	float n_out5p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out5p0 = _tex_read.rgb;
		n_out5p1 = _tex_read.a;
	}

// ScalarOp:11
	float n_in11p1 = -1.00000;
	float n_out11p0 = dot(n_out5p0, vec3(0.333333, 0.333333, 0.333333)) * n_in11p1;

// ScalarOp:12
	float n_in12p1 = 1.00000;
	float n_out12p0 = n_out11p0 + n_in12p1;

// Input:3
	float n_out3p0 = TIME;

// ScalarUniform:17
	float n_out17p0 = speed;

// ScalarOp:6
	float n_out6p0 = n_out3p0 * n_out17p0;

// ScalarFunc:9
	float n_out9p0 = sin(n_out6p0);

// ScalarMix:13
	float n_out13p0 = mix(dot(n_out5p0, vec3(0.333333, 0.333333, 0.333333)), n_out12p0, n_out9p0);

// BooleanUniform:16
	bool n_out16p0 = invulnerable;

// ScalarMix:15
	float n_out15p0 = mix(dot(n_out5p0, vec3(0.333333, 0.333333, 0.333333)), n_out13p0, (n_out16p0 ? 1.0 : 0.0));

// Output:0
	COLOR.rgb = vec3(n_out15p0);
	COLOR.a = n_out5p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 45.6394, 112.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1020, 340 )
nodes/fragment/3/node = SubResource( 7 )
nodes/fragment/3/position = Vector2( -380, 20 )
nodes/fragment/5/node = SubResource( 8 )
nodes/fragment/5/position = Vector2( -160, 440 )
nodes/fragment/6/node = SubResource( 9 )
nodes/fragment/6/position = Vector2( -160, 40 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( 80, -80 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 420, -120 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 80, 100 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 242.639, 138.01 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 620, 160 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 800, 220 )
nodes/fragment/16/node = SubResource( 48 )
nodes/fragment/16/position = Vector2( 580, 320 )
nodes/fragment/17/node = SubResource( 49 )
nodes/fragment/17/position = Vector2( -480, 180 )
nodes/fragment/connections = PoolIntArray( 6, 0, 9, 0, 9, 0, 10, 0, 5, 0, 11, 0, 11, 0, 12, 0, 12, 0, 10, 1, 5, 0, 13, 0, 3, 0, 6, 0, 5, 1, 0, 1, 9, 0, 13, 2, 12, 0, 13, 1, 5, 0, 15, 0, 13, 0, 15, 1, 15, 0, 0, 0, 16, 0, 15, 2, 17, 0, 6, 1 )
